<!doctype html>
<html lang="en"  class="daymode entry">
  <head>
    <title>Gremlins</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Identify the Imposter."/>

    <script>
      
      window._authRequiresRefresh = true;
      
    
        
        !function(){"use strict";let e,t,r,o,i=0,n=0,s=!1,a=window._authRequiresRefresh;function l(){s=!0,o=new Promise((e,o)=>{t=t=>{s=!1,e(t)},r=e=>{s=!1,o(e)}})}a?l():o=Promise.resolve({});const g={logMessages:[],log(e,t){this.logMessages.push({message:e,details:t,time:Date.now()})},get authHeaders(){return o},get requiresRefresh(){return a},forceAuthRefresh(){c()}};function c(){if(clearTimeout(i),i=0,g.log("notifying apps to refresh auth"),l(),window.gremlins_native){g.log("calling android callback");try{window.gremlins_native.refreshAuth()}catch(e){g.log("error notifying android client",e.toString())}}else if(void 0!==window.webkit)try{window.webkit.messageHandlers.callbackHandler.postMessage("refreshAuth")}catch(e){g.log("error notifying ios client",e.toString())}g.log("setting refresh timer"),clearInterval(n),n=window.setInterval((function(){g.log("waiting for apps to refresh auth...")}),5e3)}window._injectAuthHeaders=function(o,d){if(g.log("_injectAuthHeaders called"),a||(a=!0,g.log("unexpected call to _injectAuthHeaders","window loaded with cookie auth!")),s||(l(),g.log("unexpected call to _injectAuthHeaders","window not currently waiting for auth headers")),i&&(g.log("clearing existing timer"),clearTimeout(i),i=0),n&&(g.log("clearing existing refresh timer"),clearInterval(n),n=0),o&&o.hasOwnProperty("error"))return g.log("error object passed, setting error flag"),void(r&&r(o.error));if(e){Object.keys(o).some(t=>o[t]!==e.headers[t])?g.log("replacing with new headers"):g.log("received identical headers")}else g.log("no existing headers to replace"),t&&t(o);e={headers:o,expiration:d};const h=d-Date.now();h>0?(g.log("setting timer to request refresh",h.toString()+"ms"),i=window.setTimeout(c,h)):g.log("app injected expired auth!","will not attempt further auth refresh unless app injects valid auth")},window._getAuthController=function(){return g.log("_getAuthController called","client code now has access to auth"),delete window._getAuthController,g}}();
    </script>

    
    <script src="https://www.redditstatic.com/gremlins/client/lib/webcomponents-loader.js"></script>

    
    <script src="https://www.redditstatic.com/gremlins/client/index-ac72ac48.js"></script>
    

    
    <script async src="https://www.redditstatic.com/gremlins/client/embed-7c0e5812.js"></script>
    

    
<style>
  :root {
    /* base color palette for day-theme */
    --color-primary: #24A0ED;
    --color-secondary: #006CBF;
    --color-tone-1: #1A1A1B;
    --color-tone-2: #787C7E;
    --color-tone-3: #878A8C;
    --color-tone-4: #D3D6DA;
    --color-tone-5: #EDEFF1;
    --color-tone-6: #F6F7F8;
    --color-tone-7: #FFFFFF;
    --color-highlight: #DDE9F2;
  }

  .nightmode {
    /* base color palette for night-theme */
    --color-primary: #006CBF;
    --color-secondary: #24A0ED;
    --color-tone-1: #D7DADC;
    --color-tone-2: #818384;
    --color-tone-3: #565758;
    --color-tone-4: #3A3A3C;
    --color-tone-5: #272729;
    --color-tone-6: #1A1A1B;
    --color-tone-7: #121213;
    --color-highlight: #DDE9F2;
  }

  /* constant colors and colors derived from base theme */
  :root, .nightmode {
    /* derived theme colors */
    --color-canvas: var(--color-tone-5);
    --color-spoiler: var(--color-tone-1);
    --color-text: var(--color-tone-1);
    --color-background: var(--color-tone-6);
    /* keywoard colors */
    --color-dark: #1A1A1B;
    --color-light: #F6F7F8;
    --color-orangered: #FF4500;
    --color-green: #46D160;
    --color-red: #EA0027;
    --color-periwinkle: #7193FF;
    /* predefined company colors */
    --color-positive: var(--color-green);
    --color-negative: var(--color-red);
    --color-admin: var(--color-orangered);
    --color-moderator: var(--color-green);
    --color-self: #0DD3BB;
    --color-coins: #DDBD37;
    --color-nsfw: #FF585B;
    --color-live: var(--color-orangered);
    --color-caution: #FFB000;
    --color-danger: var(--color-red);
    --color-upvote: var(--color-orangered);
    --color-downvote: var(--color-periwinkle);
    /* gremlins styles */
    --gradient-main: linear-gradient(180deg, #00D971 0%, #00CFAA 100%);
    --gradient-action: linear-gradient(89.57deg, #EC0623 0%, #FF8717 100%);
    --color-gremlin: #01D0A7;
    --color-focus: #0079D3;;
  }

  .nightmode {
    --color-background: var(--color-tone-7);
  }

  /* fix FOUC */
  :not(:defined) {
      visibility: hidden;
  }

  /* base styles */
  :root {
    background: var(--color-background);
    color: var(--color-text);
    font-family: Roboto, "SF Pro Text", "IBM Plex Sans", Trubuchet MS, sans-serif;
    margin: 0;
    padding: 24px 8px;
  }

  /* ios form zoom fix */
  body { font-size: 16px; }
  input, select, textarea { font-size: 100%; }

  body {
    margin: 0;
  }

  .entry {
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 100%;
    padding: 0 8px;
  }

  input, textarea {
    color: inherit;
  }

  * {
    outline: none !important;
    -webkit-tap-highlight-color: transparent !important;
  }

  gremlin-app {
    max-width: 550px;
    margin: auto;
  }

  textarea {
    border-radius: 24px;
    line-height: 20px;
    padding: 15px;
    background: transparent;
    border: 1px solid;
    margin: 10px 0;
    display: block;
    resize: vertical;
    width: 100%;
    box-sizing: border-box;
  }

  textarea:focus {
    box-shadow: 0 0 0 2px var(--color-focus);
  }

  gremlin-form[disabled] gremlin-action[type=submit] {
    background: var(--color-tone-3);
    color: var(--color-tone-5);
    animation: none;
  }

  gremlin-app > * {
    animation: fadein .3s forwards;
  }

  @keyframes fadein {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0px);
    }
  }

  h1 + gremlin-meta,
  h2 + gremlin-meta {
    margin-bottom: 10px;
  }

  .fadeout {
    animation: fadeout .3s forwards;
  }

  @keyframes fadeout {
    from {
      opacity: 1;
      transform: translateY(0px);
    }
    to {
      opacity: 0;
      transform: translateY(-30px);
    }
  }

  
</style>

  </head>

  <body>
    <gremlin-app
      
      
      
    >
      
  
    <gremlin-prompt>
	<gremlin-stats>
  <div>
    <gremlin-avatarmeter mode="negative" background="#FF4500" avatar="https://www.redditstatic.com/gremlins/imposter.png" value="0.31046345797260666" max="1"></gremlin-avatarmeter>
    Imposter deceives<br>
    humans: 31%
  </div>
  
  <div>
    
      <gremlin-numberstat value="763188" delta=6942></gremlin-numberstat>
      Total answers
    
  </div>
</gremlin-stats>

	
</gremlin-prompt>
  

    </gremlin-app>
  </body>
</html>